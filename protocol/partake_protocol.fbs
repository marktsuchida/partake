/*
 * Copyright (C) 2020, The Board of Regents of the University of Wisconsin
 * System
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

namespace partake.protocol;

/*
 * There is no root_type; RequestMessage and ResponseMessage are our root
 * types, and we always know which to expect.
 *
 * Additional rules not expressed by the FlatBuffers schema:
 *
 * - The wire format always prefixes each RequestMessage/ResponseMessage with a
 *   32-bit size field, using the standard FlatBuffers-generated methods.
 *   - This guarantees that the size prefix can be placed at an 8-byte boundary
 *     in order to have aligned access to the message payload.
 *
 * - We do the following to ensure that correct alignment can be mainteined at
 *   the receiver:
 *   - If the value of the size prefix is not a half-integer multiple of 8,
 *     append zero bytes up to an 8-byte boundary.
 *   - The receiver thus only needs to ensure that a buffer holding one or more
 *     consecutive messages is 8-byte aligned. The end-of-message offset is
 *     rounded up to a multiple of 8.
 *
 * - The size of a single RequestMessage or ResponseMessage, including the size
 *   prefix, must not exceed 32 KiB.
 */


enum Status : int32 {
    OK,
    INVALID_REQUEST, // Malformed
    OUT_OF_MEMORY,
    NO_SUCH_SEGMENT,
    NO_SUCH_OBJECT, // Token does not exist (in the correct state)
    OBJECT_BUSY, // Cannot open unpublished; cannot unpublish opened by others
    OBJECT_RESERVED, // Unpublish request already pending
}


table PosixMmapSpec {
    // shm_open() or open() and mmap()
    name: string (required);
    use_shm_open: bool = true; // Otherwise use open()
}


table SystemVSharedMemorySpec {
    // shmget()
    key: int32;
}


table Win32FileMappingSpec {
    // OpenFileMapping() and MapViewOfFile()
    name: string (required);
    use_large_pages: bool = false; // FILE_MAP_LARGE_PAGES
}


union SegmentMappingSpec {
    PosixMmapSpec,
    SystemVSharedMemorySpec,
    Win32FileMappingSpec,
}


table SegmentSpec {
    size: uint64;
    spec: SegmentMappingSpec;
}


struct Mapping {
    token: uint64;
    segment: uint32;
    offset: uint64;
    size: uint64;
}


table HelloRequest {
    pid: uint32;
    name: string;

    /*
     * A newly connected client should issue a HelloRequest as the first
     * request. (Otherwise partaked will drop the connection.) This request
     * must not be sent more than once per connection.
     *
     * The client should send its process id: this is only used for logging so
     * that it is easier to identify errors caused by a particular client. The
     * optional 'name' should be a short, user-supplied string that describes
     * the client's role; it is again only used for logging purposes; long
     * names may be truncated.
     */
}


table HelloResponse {
    conn_no: uint32;

    /*
     * The connection number assigned by partaked is intended for diagnostic
     * use only (e.g. to match partaked logging to a particular client).
     */
}


table QuitRequest {
    /*
     * Clients should send this request when intentionally disconnecting. It
     * has no effect (other than that partaked may initiate the disconnection),
     * but allows partaked to log the disconnection as intentional, potentially
     * helping with diagnosing issues.
     *
     * No response is sent by partaked to a QuitRequest, and all subsequent
     * requests are discarded (the client should not send any). Any pending
     * requests may be canceled without response.
     */
}


table QuitResponse {
    /*
     * This response is NOT ACTUALLY SENT. It is defined here so that the
     * AnyResponse union and AnyRequest union can have corresponding type ids.
     */
}


table GetSegmentRequest {
    segment: uint32;

    /*
     * The segment number must be one that appeared in a Mapping returned by a
     * previous Alloc/Realloc/Open. If the segment number is unknown, status is
     * NO_SUCH_SEGMENT.
     */
}


table GetSegmentResponse {
    segment: SegmentSpec;
}


table AllocRequest {
    size: uint64;
    clear: bool = false;
    share_mutable: bool = false;

    /*
     * An object of the given size is allocated, and optionally cleared. If
     * there was not enough space in the shared memory pool, status is
     * OUT_OF_MEMORY.
     *
     * If 'share_mutable' is false, the returned object is in the "unpublished"
     * state and opened for writing by this connection. It can later be
     * published to allow access by (this and) other connections.
     *
     * If 'share_mutable' is true, the returned object is a shared-mutable
     * object. This means that (this and) other connections can immediately
     * open the object, and all openers have read and write access. However,
     * Open requests on shared-mutable objects must also specify
     * 'share_mutable' to ensure consistent usage by the client. Shared-
     * mutable objects are intended for use cases where some other mechanism
     * exists to coordinate object read and write access.
     *
     * Both normal and shared-mutable objects need to be closed when done with.
     */
}


table AllocResponse {
    object: Mapping; // Null if status is not OK
}


table ReallocRequest {
    token: uint64;
    size: uint64;

    /*
     * The token must exist, be unpublished, not be shared-mutable, and opened
     * by this connection for writing, or else status is NO_SUCH_OBJECT.
     * Otherwise the object's buffer is resized to the requested size,
     * preserving its contents. If there is not enough space in the shared
     * memory pool, status is OUT_OF_MEMORY. On success, the object buffer may
     * move, requiring the client to remap it.
     */
}


table ReallocResponse {
    object: Mapping; // Null if status is not OK
}


table OpenRequest {
    token: uint64;
    wait: bool = true;
    share_mutable: bool = false;

    /*
     * The token must exist and its type must match 'share_mutable', or else
     * status is NO_SUCH_OBJECT.
     *
     * If 'share_mutable' is false and the token refers to a published object,
     * the object is opened for read-only access. If the token refers to an
     * unpublished object, behavior depends on the 'wait' flag. If 'wait' is
     * false, status is OBJECT_BUSY. If 'wait' is true, partaked waits for the
     * object to be published and opens it for read-only access before
     * responding. If the object is closed by its writer before ever being
     * published, the wait is canceled and a status of NO_SUCH_OBJECT is
     * returned.
     *
     * If 'share_mutable' is true and the token refers to a shared-mutable
     * object, the object is opened for read and write access.
     *
     * In all cases, successfully opened objects must be closed when done with.
     */
}


table OpenResponse {
    object: Mapping; // Null if status is not OK
}


table CloseRequest {
    token: uint64;

    /*
     * The token must exist and be opened by this connection, whether by Alloc
     * or by Open, or else status is NO_SUCH_OBJECT.
     *
     * The number of times a given object is opened by a connection is counted
     * by partaked, and a corresponding number of Close requests must be
     * issued.
     *
     * If a client disconnects (intentionally or otherwise), all objects that
     * were opened by the connection are automatically closed; use of a
     * throw-away connection might be a simpler cleanup method for some
     * applications (note that a process can make multiple connections to
     * partaked).
     */
}


table CloseResponse {
}


table PublishRequest {
    token: uint64;

    /*
     * The token must exist, be unpublished, not be shared-mutable, and opened
     * by this connection for writing, or else status is NO_SUCH_OBJECT.
     *
     * Otherwise the object is marked published, which allows (this and) other
     * connections to open it for read-only access. The access already held by
     * this connection also changes to read-only.
     */
}


table PublishResponse {
}


table UnpublishRequest {
    token: uint64;
    wait: bool = true;
    clear: bool = false;

    /*
     * The token must exist, be published, not be shared-mutable, and opened by
     * this connection (for reading), or else status is NO_SUCH_OBJECT.
     *
     * If the object is exclusively opened by this connection (i.e., opened
     * exactly once by this connection, and not opened by any other
     * connections), the object is removed from circulation, marked
     * unpublished, given a new token, and reopened by this connection with
     * read and write access. Otherwise, behavior depends on the 'wait' flag.
     * If 'wait' is false, status is OBJECT_BUSY. If 'wait' is true, the
     * request is suspended until this connection becomes the exclusive holder
     * of access to the object, so that unpublishing can take place.
     *
     * Even if 'wait' is true, if another Unpublish request (by this or another
     * connection) is pending on the object, the request fails immediately with
     * a status of OBJECT_RESERVED.
     *
     * A pending Unpublish request can fail with a NO_SUCH_OBJECT status if
     * this connection (erroneously) closes all of its access to the object
     * (while other connections still hold access).
     *
     * Upon successful completion of an Unpublish, the old token of the object
     * is completely removed from partaked and no client can ever open it
     * again. This allows the client performing the Unpublish to reuse the
     * buffer by writing new content to it and publishing it again. The fact
     * that an Unpublish (rather than a Close followed by a fresh Alloc) is
     * taking place is not visible to any other clients. Note that for
     * non-shared-mutable objects, a given token is guaranteed to only ever
     * refer to the same content.
     *
     * Unpublishing is intended for two types of advanced and
     * performance-critical applications: (1) streaming data from one process
     * to one or more consumers without incurring the overhead of allocating
     * new buffers, and (2) passing data from one process to second, which
     * modifies the data in place (and potentially passes it to other
     * processes) without incurring the overhead of copying data (and
     * allocating a new object). Whatever system that coordinates access to the
     * objects must ensure that deadlock or premature unpublishing does not
     * occur.
     *
     * If 'clear' is true, the object buffer is zeroed upon successful
     * unpublishing.
     */
}


table UnpublishResponse {
    token: uint64; // Null if status is not OK
}


union AnyRequest {
    HelloRequest,
    QuitRequest,
    GetSegmentRequest,
    AllocRequest,
    ReallocRequest,
    OpenRequest,
    CloseRequest,
    PublishRequest,
    UnpublishRequest,
}


union AnyResponse {
    HelloResponse,
    QuitResponse, // Never actually sent!
    GetSegmentResponse,
    AllocResponse,
    ReallocResponse,
    OpenResponse,
    CloseResponse,
    PublishResponse,
    UnpublishResponse,
}


table Request {
    seqno: uint64;
    request: AnyRequest;

    /*
     * 'seqno' is copied to the corresponding response by partaked. The client
     * can assign whatever it prefers.
     */
}


table Response {
    seqno: uint64;
    status: Status = OK;
    response: AnyResponse;
}


table RequestMessage {
    requests: [Request];

    /*
     * Sending multiple requests in a packet is exactly equivalent to sending
     * individual packets containing a single request each (except that it may
     * allow partaked to combine some or all of the responses into a single
     * packet).
     */
}


table ResponseMessage {
    responses: [Response];

    /*
     * Clients must treat a packet containing multiple responses exactly the
     * same way it would treat individual packets containing a single response
     * each.
     */
}
