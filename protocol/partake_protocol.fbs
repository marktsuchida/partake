/*
 * This file is part of the partake project
 * Copyright 2020-2023 Board of Regents of the University of Wisconsin System
 * SPDX-License-Identifier: BSD-2-Clause
 */

namespace partake.protocol;

/*
 * There is no root_type; RequestMessage and ResponseMessage are our root
 * types, and we always know which to expect.
 *
 * Additional rules not expressed by the FlatBuffers schema:
 *
 * - The wire format always prefixes each RequestMessage/ResponseMessage with a
 *   32-bit size field, using the standard FlatBuffers-generated methods.
 *   - This guarantees that the size prefix can be placed at an 8-byte boundary
 *     in order to have aligned access to the message payload.
 *
 * - We do the following to ensure that correct alignment can be mainteined at
 *   the receiver:
 *   - If the value of the size prefix is not a half-integer multiple of 8,
 *     append zero bytes up to an 8-byte boundary.
 *   - The receiver thus only needs to ensure that a buffer holding one or more
 *     consecutive messages is 8-byte aligned. The end-of-message offset is
 *     rounded up to a multiple of 8.
 *
 * - The size of a single RequestMessage or ResponseMessage, including the size
 *   prefix, must not exceed 32 KiB.
 *
 * - Although the possible error codes from each request is documented below,
 *   clients should be prepared to receive other codes, including ones that
 *   have not yet been defined.
 */


enum Status : int32 {
    OK,
    INVALID_REQUEST, // Malformed
    OUT_OF_SHMEM,
    NO_SUCH_SEGMENT,
    NO_SUCH_OBJECT, // Token does not exist (in the correct state)
    OBJECT_BUSY, // Cannot open unshared; cannot unshare opened by others
    OBJECT_RESERVED, // Unshare request already pending
}


enum Policy : int8 {
    DEFAULT, // Write once exclusively; share as immutable buffer
    PRIMITIVE, // Share with simultaneous write access
}


table PosixMmapSpec {
    // shm_open() or open() and mmap()
    name: string (required);
    use_shm_open: bool = true; // Otherwise use open()
}


table SystemVSharedMemorySpec {
    // shmat()
    shm_id: int32; // >= 0
}


table Win32FileMappingSpec {
    // OpenFileMapping() and MapViewOfFile()
    name: string (required);
    use_large_pages: bool = false; // FILE_MAP_LARGE_PAGES
}


union SegmentMappingSpec {
    PosixMmapSpec,
    SystemVSharedMemorySpec,
    Win32FileMappingSpec,
}


table SegmentSpec {
    size: uint64;
    spec: SegmentMappingSpec;
}


struct Mapping {
    token: uint64; // Always an object token (not a voucher)
    segment: uint32;
    offset: uint64;
    size: uint64;
}


table PingRequest {
    /*
     * A no-op for client and server testing. Sending pings is not required for
     * the purpose of maintaining a connection.
     */
}


table PingResponse {
}


table HelloRequest {
    pid: uint32;
    name: string;

    /*
     * A newly connected client should issue a HelloRequest as the first
     * request. (Otherwise partaked will drop the connection.) This request
     * must not be sent more than once per connection.
     *
     * The client should send its process id: this is used for logging and
     * monitoring so that it is easier to identify errors caused by a particular
     * client. The optional 'name' should be a short, user-supplied string that
     * describes the client's role; it is again used for logging and monitoring;
     * long names may be truncated.
     */
}


table HelloResponse {
    conn_no: uint32;

    /*
     * The connection number assigned by partaked is intended for diagnostic
     * use only (e.g. to match partaked logging to a particular client).
     */
}


table QuitRequest {
    /*
     * Clients should send this request when intentionally disconnecting. It
     * has no effect (other than that partaked may initiate the disconnection),
     * but allows partaked to log the disconnection as intentional, potentially
     * helping with diagnosing issues.
     *
     * Any subsequent requests are discarded (the client should not send any).
     * Any pending requests may be canceled without response.
     */
}


table QuitResponse {
    /*
     * If this response is received by the client, it is the last message
     * received.
     */
}


table GetSegmentRequest {
    segment: uint32;

    /*
     * The segment number must be one that appeared in a Mapping returned by a
     * previous Alloc/Open. If the segment number is unknown, status is
     * NO_SUCH_SEGMENT.
     */
}


table GetSegmentResponse {
    segment: SegmentSpec;
}


table AllocRequest {
    size: uint64;
    policy: Policy = DEFAULT;

    /*
     * An object of the given size is allocated. If there was not enough space
     * in the shared memory pool, status is OUT_OF_MEMORY.
     *
     * If 'policy' is DEFAULT, the returned object is in the "unshared"
     * state and opened for writing by this connection. It can later be
     * shared to allow access by (this and) other connections.
     *
     * If 'policy' is PRIMITIVE, the returned object does not distinguish
     * between unshared and shared state. Other connections (as well as
     * the current one) can immediately open the object, and all openers have
     * read and write access. PRIMITIVE objects are intended for use cases
     * where some other mechanism exists to coordinate object read and write
     * access.
     *
     * All allocated objects need to be closed when done with.
     */
}


table AllocResponse {
    object: Mapping; // Null if status is not OK
    zeroed: bool = false; // Object happens to be zero-filled
}


table OpenRequest {
    token: uint64;
    policy: Policy = DEFAULT;
    wait: bool = true;

    /*
     * The token must exist and its type must match 'policy', or else status is
     * NO_SUCH_OBJECT. The token may be a voucher.
     *
     * If 'policy' is DEFAULT and the token refers to a shared object, the
     * object is opened for read-only access. If the token refers to an
     * unshared object, behavior depends on the 'wait' flag. If 'wait' is
     * false, status is OBJECT_BUSY. If 'wait' is true, partaked waits for the
     * object to be shared and opens it for read-only access before
     * responding. If the object is closed by its writer before ever being
     * shared, the wait is canceled and a status of NO_SUCH_OBJECT is
     * returned.
     *
     * If 'policy' is PRIMITIVE, the object is opened for read and write
     * access.
     *
     * If the token is a voucher, the object it refers to is opened as above.
     * If 'wait' is true, opening succeeds even if the voucher expires before
     * the object can be opened.
     *
     * In all cases, successfully opened objects must be closed when done with.
     */
}


table OpenResponse {
    object: Mapping; // Null if status is not OK
}


table CloseRequest {
    token: uint64;

    /*
     * The token must not be a voucher and must exist and be opened by this
     * connection, whether by Alloc or by Open, or else status is
     * NO_SUCH_OBJECT.
     *
     * The number of times a given object is opened by a connection is counted
     * by partaked, and a corresponding number of Close requests must be
     * issued by the same client.
     *
     * If a client disconnects (intentionally or otherwise), all objects that
     * were opened by the connection are automatically closed; use of a
     * throw-away connection might be a simpler cleanup method for some
     * applications (note that a process can make multiple connections to
     * partaked).
     */
}


table CloseResponse {
}


table ShareRequest {
    token: uint64;

    /*
     * The token must not be a voucher and must refer to a DEFAULT,
     * unshared object that is opened for writing by this client, or else
     * status is NO_SUCH_OBJECT.
     *
     * The object is marked shared, which allows (this and) other
     * connections to open it for read-only access. The access already held by
     * this connection also changes to read-only.
     */
}


table ShareResponse {
}


table UnshareRequest {
    token: uint64;
    wait: bool = true;

    /*
     * The token must not be a voucher and must refer to a DEFAULT, shared
     * object that is opened by this client (for reading), or else status is
     * NO_SUCH_OBJECT.
     *
     * If the object is exclusively opened by this connection (i.e., opened
     * exactly once by this connection, not opened by any other connections,
     * and no vouchers outstanding), the object is removed from circulation,
     * marked unshared, given a new token, and reopened by this connection
     * with read and write access. Otherwise, behavior depends on the 'wait'
     * flag. If 'wait' is false, status is OBJECT_BUSY. If 'wait' is true, the
     * request is suspended until this connection becomes the exclusive holder
     * of access to the object, so that unsharing can take place.
     *
     * Even if 'wait' is true, if another Unshare request (by this or another
     * connection) is pending on the object, the request fails immediately with
     * a status of OBJECT_RESERVED.
     *
     * A pending Unshare request can fail with a NO_SUCH_OBJECT status if
     * this connection (erroneously) closes all of its access to the object
     * (while other connections still hold access).
     *
     * A pending Unshare request does not, however, prevent this or another
     * client from opening the object or creating vouchers for the object.
     *
     * Upon successful completion of an Unshare, the old token of the object
     * is completely removed from partaked and no client can ever open it
     * again. This allows the client performing the Unshare to reuse the
     * buffer by writing new content to it and sharing it again. The fact
     * that an Unshare (rather than a Close followed by a fresh Alloc) is
     * taking place is not visible to any other clients. Note that for
     * DEFAULT objects, a given token is guaranteed to only ever refer to the
     * same content.
     *
     * Unsharing is intended for two types of advanced and
     * performance-critical applications: (1) streaming data from a producer to
     * one or more consumers without incurring the overhead of allocating new
     * buffers, and (2) passing data from one process to another, which
     * modifies the data in place (and potentially passes it to yet other
     * processes) without incurring the overhead of copying data (and
     * allocating a new object). Whatever system that coordinates access to the
     * objects must ensure that deadlock or premature unsharing does not
     * occur.
     */
}


table UnshareResponse {
    token: uint64; // The new token; null or zero if status is not OK
    zeroed: bool = false; // Object happens to be zero-filled
}


table CreateVoucherRequest {
    token: uint64;

    /*
     * The token must refer to an existing object, or else status is
     * NO_SUCH_OBJECT. The token may be a voucher.
     *
     * A voucher token that refers to the given object is issued and returned.
     *
     * A voucher is an alternative token that can be generated for an object
     * and passed between partake clients. When one or more valid vouchers
     * exist for an object, the object is kept alive even if it is not kept
     * open by any client. This is advantageous in certain applications where
     * an object is handed off from one client to another, and the first client
     * does not want to wait for an acknowledgment from the second client
     * before it can close the object.
     *
     * The only possible operations on a voucher are Open and DiscardVoucher.
     *
     * To prevent lost vouchers from causing shared memory to fill up with
     * unused objects (for example when a process handling vouchers crashes),
     * each voucher expires after a set timeout (measured from when the voucher
     * is created). Thus, a voucher should be created just before sending it
     * off to its destination, and the receiver of a voucher should open it (or
     * discard it) without delay. Voucher expiry should not be relied upon for
     * normal operation.
     *
     * Voucher tokens live in the same namespace as ordinary tokens. Thus they
     * are guaranteed to be unique during the lifetime of the partaked
     * instance.
     */
}


table CreateVoucherResponse {
    token: uint64; // The voucher token; null or zero if status is not OK
}


table DiscardVoucherRequest {
    token: uint64;

    /*
     * The token must exist, or else status is NO_SUCH_OBJECT.
     *
     * If the token is a voucher, it is caused to immediately expire. If the
     * voucher is the only remaining reference to an object, the object is
     * accordingly deallocated without waiting for the voucher to time out.
     *
     * If the token is not a voucher but an ordinary object token, this is a
     * no-op. (This allows clients to be agnostic about whether tokens it
     * receives from elsewhere are vouchers or not.)
     */
}


table DiscardVoucherResponse {
    token: uint64; // The object token; null or zero if status is not OK

    /*
     * The object token is returned for debugging and logging purposes only.
     */
}


union AnyRequest {
    PingRequest,
    HelloRequest,
    QuitRequest,
    GetSegmentRequest,
    AllocRequest,
    OpenRequest,
    CloseRequest,
    ShareRequest,
    UnshareRequest,
    CreateVoucherRequest,
    DiscardVoucherRequest,
}


union AnyResponse {
    PingResponse,
    HelloResponse,
    QuitResponse, // Never actually sent!
    GetSegmentResponse,
    AllocResponse,
    OpenResponse,
    CloseResponse,
    ShareResponse,
    UnshareResponse,
    CreateVoucherResponse,
    DiscardVoucherResponse,
}


table Request {
    seqno: uint64;
    request: AnyRequest;

    /*
     * 'seqno' is copied to the corresponding response by partaked. The client
     * can assign whatever it prefers.
     */
}


table Response {
    seqno: uint64;
    status: Status = OK;
    response: AnyResponse;
}


table RequestMessage {
    requests: [Request];

    /*
     * Sending multiple requests in a packet is exactly equivalent to sending
     * individual packets containing a single request each (except that it may
     * allow partaked to combine some or all of the responses into a single
     * packet).
     */
}


table ResponseMessage {
    responses: [Response];

    /*
     * Clients must treat a packet containing multiple responses exactly the
     * same way it would treat individual packets containing a single response
     * each.
     */
}
